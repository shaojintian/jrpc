// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: options.proto

package com.sjt.jrpc.protocol;

public final class Options {
  private Options() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(com.sjt.jrpc.protocol.Options.serviceTimeout);
    registry.add(com.sjt.jrpc.protocol.Options.requestTalkType);
    registry.add(com.sjt.jrpc.protocol.Options.responseTalkType);
    registry.add(com.sjt.jrpc.protocol.Options.methodTimeout);
    registry.add(com.sjt.jrpc.protocol.Options.requestCompression);
    registry.add(com.sjt.jrpc.protocol.Options.responseCompression);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code jrpc.TalkType}
   */
  public enum TalkType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TALK_TYPE_NORMAL = 0;</code>
     */
    TALK_TYPE_NORMAL(0),
    /**
     * <code>TALK_TYPE_ONEWAY = 1;</code>
     */
    TALK_TYPE_ONEWAY(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TALK_TYPE_NORMAL = 0;</code>
     */
    public static final int TALK_TYPE_NORMAL_VALUE = 0;
    /**
     * <code>TALK_TYPE_ONEWAY = 1;</code>
     */
    public static final int TALK_TYPE_ONEWAY_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TalkType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TalkType forNumber(int value) {
      switch (value) {
        case 0: return TALK_TYPE_NORMAL;
        case 1: return TALK_TYPE_ONEWAY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TalkType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TalkType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TalkType>() {
            public TalkType findValueByNumber(int number) {
              return TalkType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sjt.jrpc.protocol.Options.getDescriptor().getEnumTypes().get(0);
    }

    private static final TalkType[] VALUES = values();

    public static TalkType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TalkType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jrpc.TalkType)
  }

  /**
   * Protobuf enum {@code jrpc.ConnectionType}
   */
  public enum ConnectionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * bit-exclusive values since we may OR them to represent supported types.
     * </pre>
     *
     * <code>CONNECTION_TYPE_UNKNOWN = 0;</code>
     */
    CONNECTION_TYPE_UNKNOWN(0),
    /**
     * <code>CONNECTION_TYPE_SINGLE = 1;</code>
     */
    CONNECTION_TYPE_SINGLE(1),
    /**
     * <code>CONNECTION_TYPE_POOLED = 2;</code>
     */
    CONNECTION_TYPE_POOLED(2),
    /**
     * <code>CONNECTION_TYPE_SHORT = 4;</code>
     */
    CONNECTION_TYPE_SHORT(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * bit-exclusive values since we may OR them to represent supported types.
     * </pre>
     *
     * <code>CONNECTION_TYPE_UNKNOWN = 0;</code>
     */
    public static final int CONNECTION_TYPE_UNKNOWN_VALUE = 0;
    /**
     * <code>CONNECTION_TYPE_SINGLE = 1;</code>
     */
    public static final int CONNECTION_TYPE_SINGLE_VALUE = 1;
    /**
     * <code>CONNECTION_TYPE_POOLED = 2;</code>
     */
    public static final int CONNECTION_TYPE_POOLED_VALUE = 2;
    /**
     * <code>CONNECTION_TYPE_SHORT = 4;</code>
     */
    public static final int CONNECTION_TYPE_SHORT_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConnectionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ConnectionType forNumber(int value) {
      switch (value) {
        case 0: return CONNECTION_TYPE_UNKNOWN;
        case 1: return CONNECTION_TYPE_SINGLE;
        case 2: return CONNECTION_TYPE_POOLED;
        case 4: return CONNECTION_TYPE_SHORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConnectionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConnectionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConnectionType>() {
            public ConnectionType findValueByNumber(int number) {
              return ConnectionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sjt.jrpc.protocol.Options.getDescriptor().getEnumTypes().get(1);
    }

    private static final ConnectionType[] VALUES = values();

    public static ConnectionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ConnectionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jrpc.ConnectionType)
  }

  /**
   * Protobuf enum {@code jrpc.ProtocolType}
   */
  public enum ProtocolType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PROTOCOL_UNKNOWN = 0;</code>
     */
    PROTOCOL_UNKNOWN(0),
    /**
     * <code>PROTOCOL_SJT_STD = 1;</code>
     */
    PROTOCOL_SJT_STD(1),
    /**
     * <code>PROTOCOL_STREAMING_RPC = 2;</code>
     */
    PROTOCOL_STREAMING_RPC(2),
    /**
     * <code>PROTOCOL_HULU_PBRPC = 3;</code>
     */
    PROTOCOL_HULU_PBRPC(3),
    /**
     * <code>PROTOCOL_SOFA_PBRPC = 4;</code>
     */
    PROTOCOL_SOFA_PBRPC(4),
    /**
     * <code>PROTOCOL_RTMP = 5;</code>
     */
    PROTOCOL_RTMP(5),
    /**
     * <code>PROTOCOL_HTTP = 6;</code>
     */
    PROTOCOL_HTTP(6),
    /**
     * <code>PROTOCOL_PUBLIC_PBRPC = 7;</code>
     */
    PROTOCOL_PUBLIC_PBRPC(7),
    /**
     * <code>PROTOCOL_NOVA_PBRPC = 8;</code>
     */
    PROTOCOL_NOVA_PBRPC(8),
    /**
     * <pre>
     * implemented in SJT-rpc-ub
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_CLIENT = 9;</code>
     */
    PROTOCOL_NSHEAD_CLIENT(9),
    /**
     * <code>PROTOCOL_NSHEAD = 10;</code>
     */
    PROTOCOL_NSHEAD(10),
    /**
     * <code>PROTOCOL_HADOOP_RPC = 11;</code>
     */
    PROTOCOL_HADOOP_RPC(11),
    /**
     * <code>PROTOCOL_HADOOP_SERVER_RPC = 12;</code>
     */
    PROTOCOL_HADOOP_SERVER_RPC(12),
    /**
     * <pre>
     * server side only
     * </pre>
     *
     * <code>PROTOCOL_MONGO = 13;</code>
     */
    PROTOCOL_MONGO(13),
    /**
     * <code>PROTOCOL_UBRPC_COMPACK = 14;</code>
     */
    PROTOCOL_UBRPC_COMPACK(14),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_DIDX_CLIENT = 15;</code>
     */
    PROTOCOL_DIDX_CLIENT(15),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_REDIS = 16;</code>
     */
    PROTOCOL_REDIS(16),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_MEMCACHE = 17;</code>
     */
    PROTOCOL_MEMCACHE(17),
    /**
     * <code>PROTOCOL_ITP = 18;</code>
     */
    PROTOCOL_ITP(18),
    /**
     * <code>PROTOCOL_NSHEAD_MCPACK = 19;</code>
     */
    PROTOCOL_NSHEAD_MCPACK(19),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_DISP_IDL = 20;</code>
     */
    PROTOCOL_DISP_IDL(20),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_ERSDA_CLIENT = 21;</code>
     */
    PROTOCOL_ERSDA_CLIENT(21),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_UBRPC_MCPACK2 = 22;</code>
     */
    PROTOCOL_UBRPC_MCPACK2(22),
    /**
     * <pre>
     * Reserve special protocol for cds-agent, which depends on FIFO right now
     * </pre>
     *
     * <code>PROTOCOL_CDS_AGENT = 23;</code>
     */
    PROTOCOL_CDS_AGENT(23),
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_ESP = 24;</code>
     */
    PROTOCOL_ESP(24),
    /**
     * <pre>
     * SJT http json rpc: http + mcpack
     * </pre>
     *
     * <code>PROTOCOL_SJT_JSON_RPC_MCPACK = 25;</code>
     */
    PROTOCOL_SJT_JSON_RPC_MCPACK(25),
    /**
     * <pre>
     * SJT http json rpc: http + json
     * </pre>
     *
     * <code>PROTOCOL_SJT_JSON_RPC_JSON = 26;</code>
     */
    PROTOCOL_SJT_JSON_RPC_JSON(26),
    /**
     * <pre>
     * nshead + protobuf
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_PROTOBUF = 28;</code>
     */
    PROTOCOL_NSHEAD_PROTOBUF(28),
    /**
     * <pre>
     * http + protobuf
     * </pre>
     *
     * <code>PROTOCOL_HTTP_PROTOBUF = 29;</code>
     */
    PROTOCOL_HTTP_PROTOBUF(29),
    /**
     * <pre>
     * http + json
     * </pre>
     *
     * <code>PROTOCOL_HTTP_JSON = 30;</code>
     */
    PROTOCOL_HTTP_JSON(30),
    /**
     * <pre>
     * nshead + json
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_JSON = 31;</code>
     */
    PROTOCOL_NSHEAD_JSON(31),
    /**
     * <pre>
     * Stargate
     * </pre>
     *
     * <code>PROTOCOL_STARGATE = 32;</code>
     */
    PROTOCOL_STARGATE(32),
    /**
     * <pre>
     * default server push protocol
     * </pre>
     *
     * <code>PROTOCOL_SERVER_PUSH = 33;</code>
     */
    PROTOCOL_SERVER_PUSH(33),
    /**
     * <pre>
     * dubbo
     * </pre>
     *
     * <code>PROTOCOL_DUBBO = 34;</code>
     */
    PROTOCOL_DUBBO(34),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PROTOCOL_UNKNOWN = 0;</code>
     */
    public static final int PROTOCOL_UNKNOWN_VALUE = 0;
    /**
     * <code>PROTOCOL_SJT_STD = 1;</code>
     */
    public static final int PROTOCOL_SJT_STD_VALUE = 1;
    /**
     * <code>PROTOCOL_STREAMING_RPC = 2;</code>
     */
    public static final int PROTOCOL_STREAMING_RPC_VALUE = 2;
    /**
     * <code>PROTOCOL_HULU_PBRPC = 3;</code>
     */
    public static final int PROTOCOL_HULU_PBRPC_VALUE = 3;
    /**
     * <code>PROTOCOL_SOFA_PBRPC = 4;</code>
     */
    public static final int PROTOCOL_SOFA_PBRPC_VALUE = 4;
    /**
     * <code>PROTOCOL_RTMP = 5;</code>
     */
    public static final int PROTOCOL_RTMP_VALUE = 5;
    /**
     * <code>PROTOCOL_HTTP = 6;</code>
     */
    public static final int PROTOCOL_HTTP_VALUE = 6;
    /**
     * <code>PROTOCOL_PUBLIC_PBRPC = 7;</code>
     */
    public static final int PROTOCOL_PUBLIC_PBRPC_VALUE = 7;
    /**
     * <code>PROTOCOL_NOVA_PBRPC = 8;</code>
     */
    public static final int PROTOCOL_NOVA_PBRPC_VALUE = 8;
    /**
     * <pre>
     * implemented in SJT-rpc-ub
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_CLIENT = 9;</code>
     */
    public static final int PROTOCOL_NSHEAD_CLIENT_VALUE = 9;
    /**
     * <code>PROTOCOL_NSHEAD = 10;</code>
     */
    public static final int PROTOCOL_NSHEAD_VALUE = 10;
    /**
     * <code>PROTOCOL_HADOOP_RPC = 11;</code>
     */
    public static final int PROTOCOL_HADOOP_RPC_VALUE = 11;
    /**
     * <code>PROTOCOL_HADOOP_SERVER_RPC = 12;</code>
     */
    public static final int PROTOCOL_HADOOP_SERVER_RPC_VALUE = 12;
    /**
     * <pre>
     * server side only
     * </pre>
     *
     * <code>PROTOCOL_MONGO = 13;</code>
     */
    public static final int PROTOCOL_MONGO_VALUE = 13;
    /**
     * <code>PROTOCOL_UBRPC_COMPACK = 14;</code>
     */
    public static final int PROTOCOL_UBRPC_COMPACK_VALUE = 14;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_DIDX_CLIENT = 15;</code>
     */
    public static final int PROTOCOL_DIDX_CLIENT_VALUE = 15;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_REDIS = 16;</code>
     */
    public static final int PROTOCOL_REDIS_VALUE = 16;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_MEMCACHE = 17;</code>
     */
    public static final int PROTOCOL_MEMCACHE_VALUE = 17;
    /**
     * <code>PROTOCOL_ITP = 18;</code>
     */
    public static final int PROTOCOL_ITP_VALUE = 18;
    /**
     * <code>PROTOCOL_NSHEAD_MCPACK = 19;</code>
     */
    public static final int PROTOCOL_NSHEAD_MCPACK_VALUE = 19;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_DISP_IDL = 20;</code>
     */
    public static final int PROTOCOL_DISP_IDL_VALUE = 20;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_ERSDA_CLIENT = 21;</code>
     */
    public static final int PROTOCOL_ERSDA_CLIENT_VALUE = 21;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_UBRPC_MCPACK2 = 22;</code>
     */
    public static final int PROTOCOL_UBRPC_MCPACK2_VALUE = 22;
    /**
     * <pre>
     * Reserve special protocol for cds-agent, which depends on FIFO right now
     * </pre>
     *
     * <code>PROTOCOL_CDS_AGENT = 23;</code>
     */
    public static final int PROTOCOL_CDS_AGENT_VALUE = 23;
    /**
     * <pre>
     * Client side only
     * </pre>
     *
     * <code>PROTOCOL_ESP = 24;</code>
     */
    public static final int PROTOCOL_ESP_VALUE = 24;
    /**
     * <pre>
     * SJT http json rpc: http + mcpack
     * </pre>
     *
     * <code>PROTOCOL_SJT_JSON_RPC_MCPACK = 25;</code>
     */
    public static final int PROTOCOL_SJT_JSON_RPC_MCPACK_VALUE = 25;
    /**
     * <pre>
     * SJT http json rpc: http + json
     * </pre>
     *
     * <code>PROTOCOL_SJT_JSON_RPC_JSON = 26;</code>
     */
    public static final int PROTOCOL_SJT_JSON_RPC_JSON_VALUE = 26;
    /**
     * <pre>
     * nshead + protobuf
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_PROTOBUF = 28;</code>
     */
    public static final int PROTOCOL_NSHEAD_PROTOBUF_VALUE = 28;
    /**
     * <pre>
     * http + protobuf
     * </pre>
     *
     * <code>PROTOCOL_HTTP_PROTOBUF = 29;</code>
     */
    public static final int PROTOCOL_HTTP_PROTOBUF_VALUE = 29;
    /**
     * <pre>
     * http + json
     * </pre>
     *
     * <code>PROTOCOL_HTTP_JSON = 30;</code>
     */
    public static final int PROTOCOL_HTTP_JSON_VALUE = 30;
    /**
     * <pre>
     * nshead + json
     * </pre>
     *
     * <code>PROTOCOL_NSHEAD_JSON = 31;</code>
     */
    public static final int PROTOCOL_NSHEAD_JSON_VALUE = 31;
    /**
     * <pre>
     * Stargate
     * </pre>
     *
     * <code>PROTOCOL_STARGATE = 32;</code>
     */
    public static final int PROTOCOL_STARGATE_VALUE = 32;
    /**
     * <pre>
     * default server push protocol
     * </pre>
     *
     * <code>PROTOCOL_SERVER_PUSH = 33;</code>
     */
    public static final int PROTOCOL_SERVER_PUSH_VALUE = 33;
    /**
     * <pre>
     * dubbo
     * </pre>
     *
     * <code>PROTOCOL_DUBBO = 34;</code>
     */
    public static final int PROTOCOL_DUBBO_VALUE = 34;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProtocolType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ProtocolType forNumber(int value) {
      switch (value) {
        case 0: return PROTOCOL_UNKNOWN;
        case 1: return PROTOCOL_SJT_STD;
        case 2: return PROTOCOL_STREAMING_RPC;
        case 3: return PROTOCOL_HULU_PBRPC;
        case 4: return PROTOCOL_SOFA_PBRPC;
        case 5: return PROTOCOL_RTMP;
        case 6: return PROTOCOL_HTTP;
        case 7: return PROTOCOL_PUBLIC_PBRPC;
        case 8: return PROTOCOL_NOVA_PBRPC;
        case 9: return PROTOCOL_NSHEAD_CLIENT;
        case 10: return PROTOCOL_NSHEAD;
        case 11: return PROTOCOL_HADOOP_RPC;
        case 12: return PROTOCOL_HADOOP_SERVER_RPC;
        case 13: return PROTOCOL_MONGO;
        case 14: return PROTOCOL_UBRPC_COMPACK;
        case 15: return PROTOCOL_DIDX_CLIENT;
        case 16: return PROTOCOL_REDIS;
        case 17: return PROTOCOL_MEMCACHE;
        case 18: return PROTOCOL_ITP;
        case 19: return PROTOCOL_NSHEAD_MCPACK;
        case 20: return PROTOCOL_DISP_IDL;
        case 21: return PROTOCOL_ERSDA_CLIENT;
        case 22: return PROTOCOL_UBRPC_MCPACK2;
        case 23: return PROTOCOL_CDS_AGENT;
        case 24: return PROTOCOL_ESP;
        case 25: return PROTOCOL_SJT_JSON_RPC_MCPACK;
        case 26: return PROTOCOL_SJT_JSON_RPC_JSON;
        case 28: return PROTOCOL_NSHEAD_PROTOBUF;
        case 29: return PROTOCOL_HTTP_PROTOBUF;
        case 30: return PROTOCOL_HTTP_JSON;
        case 31: return PROTOCOL_NSHEAD_JSON;
        case 32: return PROTOCOL_STARGATE;
        case 33: return PROTOCOL_SERVER_PUSH;
        case 34: return PROTOCOL_DUBBO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ProtocolType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ProtocolType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ProtocolType>() {
            public ProtocolType findValueByNumber(int number) {
              return ProtocolType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sjt.jrpc.protocol.Options.getDescriptor().getEnumTypes().get(2);
    }

    private static final ProtocolType[] VALUES = values();

    public static ProtocolType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ProtocolType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jrpc.ProtocolType)
  }

  /**
   * Protobuf enum {@code jrpc.CompressType}
   */
  public enum CompressType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COMPRESS_TYPE_NONE = 0;</code>
     */
    COMPRESS_TYPE_NONE(0),
    /**
     * <code>COMPRESS_TYPE_SNAPPY = 1;</code>
     */
    COMPRESS_TYPE_SNAPPY(1),
    /**
     * <code>COMPRESS_TYPE_GZIP = 2;</code>
     */
    COMPRESS_TYPE_GZIP(2),
    /**
     * <code>COMPRESS_TYPE_ZLIB = 3;</code>
     */
    COMPRESS_TYPE_ZLIB(3),
    /**
     * <code>COMPRESS_TYPE_LZ4 = 4;</code>
     */
    COMPRESS_TYPE_LZ4(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>COMPRESS_TYPE_NONE = 0;</code>
     */
    public static final int COMPRESS_TYPE_NONE_VALUE = 0;
    /**
     * <code>COMPRESS_TYPE_SNAPPY = 1;</code>
     */
    public static final int COMPRESS_TYPE_SNAPPY_VALUE = 1;
    /**
     * <code>COMPRESS_TYPE_GZIP = 2;</code>
     */
    public static final int COMPRESS_TYPE_GZIP_VALUE = 2;
    /**
     * <code>COMPRESS_TYPE_ZLIB = 3;</code>
     */
    public static final int COMPRESS_TYPE_ZLIB_VALUE = 3;
    /**
     * <code>COMPRESS_TYPE_LZ4 = 4;</code>
     */
    public static final int COMPRESS_TYPE_LZ4_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompressType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompressType forNumber(int value) {
      switch (value) {
        case 0: return COMPRESS_TYPE_NONE;
        case 1: return COMPRESS_TYPE_SNAPPY;
        case 2: return COMPRESS_TYPE_GZIP;
        case 3: return COMPRESS_TYPE_ZLIB;
        case 4: return COMPRESS_TYPE_LZ4;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompressType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompressType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompressType>() {
            public CompressType findValueByNumber(int number) {
              return CompressType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.sjt.jrpc.protocol.Options.getDescriptor().getEnumTypes().get(3);
    }

    private static final CompressType[] VALUES = values();

    public static CompressType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompressType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:jrpc.CompressType)
  }

  public interface ChunkInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:jrpc.ChunkInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 stream_id = 1;</code>
     * @return The streamId.
     */
    long getStreamId();

    /**
     * <code>int64 chunk_id = 2;</code>
     * @return The chunkId.
     */
    long getChunkId();
  }
  /**
   * Protobuf type {@code jrpc.ChunkInfo}
   */
  public  static final class ChunkInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:jrpc.ChunkInfo)
      ChunkInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChunkInfo.newBuilder() to construct.
    private ChunkInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChunkInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChunkInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChunkInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              streamId_ = input.readInt64();
              break;
            }
            case 16: {

              chunkId_ = input.readInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.sjt.jrpc.protocol.Options.internal_static_jrpc_ChunkInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.sjt.jrpc.protocol.Options.internal_static_jrpc_ChunkInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.sjt.jrpc.protocol.Options.ChunkInfo.class, com.sjt.jrpc.protocol.Options.ChunkInfo.Builder.class);
    }

    public static final int STREAM_ID_FIELD_NUMBER = 1;
    private long streamId_;
    /**
     * <code>int64 stream_id = 1;</code>
     * @return The streamId.
     */
    public long getStreamId() {
      return streamId_;
    }

    public static final int CHUNK_ID_FIELD_NUMBER = 2;
    private long chunkId_;
    /**
     * <code>int64 chunk_id = 2;</code>
     * @return The chunkId.
     */
    public long getChunkId() {
      return chunkId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (streamId_ != 0L) {
        output.writeInt64(1, streamId_);
      }
      if (chunkId_ != 0L) {
        output.writeInt64(2, chunkId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (streamId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, streamId_);
      }
      if (chunkId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, chunkId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.sjt.jrpc.protocol.Options.ChunkInfo)) {
        return super.equals(obj);
      }
      com.sjt.jrpc.protocol.Options.ChunkInfo other = (com.sjt.jrpc.protocol.Options.ChunkInfo) obj;

      if (getStreamId()
          != other.getStreamId()) return false;
      if (getChunkId()
          != other.getChunkId()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STREAM_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStreamId());
      hash = (37 * hash) + CHUNK_ID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getChunkId());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.sjt.jrpc.protocol.Options.ChunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.sjt.jrpc.protocol.Options.ChunkInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jrpc.ChunkInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:jrpc.ChunkInfo)
        com.sjt.jrpc.protocol.Options.ChunkInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.sjt.jrpc.protocol.Options.internal_static_jrpc_ChunkInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.sjt.jrpc.protocol.Options.internal_static_jrpc_ChunkInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.sjt.jrpc.protocol.Options.ChunkInfo.class, com.sjt.jrpc.protocol.Options.ChunkInfo.Builder.class);
      }

      // Construct using com.sjt.jrpc.protocol.Options.ChunkInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        streamId_ = 0L;

        chunkId_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.sjt.jrpc.protocol.Options.internal_static_jrpc_ChunkInfo_descriptor;
      }

      @java.lang.Override
      public com.sjt.jrpc.protocol.Options.ChunkInfo getDefaultInstanceForType() {
        return com.sjt.jrpc.protocol.Options.ChunkInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.sjt.jrpc.protocol.Options.ChunkInfo build() {
        com.sjt.jrpc.protocol.Options.ChunkInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.sjt.jrpc.protocol.Options.ChunkInfo buildPartial() {
        com.sjt.jrpc.protocol.Options.ChunkInfo result = new com.sjt.jrpc.protocol.Options.ChunkInfo(this);
        result.streamId_ = streamId_;
        result.chunkId_ = chunkId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.sjt.jrpc.protocol.Options.ChunkInfo) {
          return mergeFrom((com.sjt.jrpc.protocol.Options.ChunkInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.sjt.jrpc.protocol.Options.ChunkInfo other) {
        if (other == com.sjt.jrpc.protocol.Options.ChunkInfo.getDefaultInstance()) return this;
        if (other.getStreamId() != 0L) {
          setStreamId(other.getStreamId());
        }
        if (other.getChunkId() != 0L) {
          setChunkId(other.getChunkId());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.sjt.jrpc.protocol.Options.ChunkInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.sjt.jrpc.protocol.Options.ChunkInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long streamId_ ;
      /**
       * <code>int64 stream_id = 1;</code>
       * @return The streamId.
       */
      public long getStreamId() {
        return streamId_;
      }
      /**
       * <code>int64 stream_id = 1;</code>
       * @param value The streamId to set.
       * @return This builder for chaining.
       */
      public Builder setStreamId(long value) {
        
        streamId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 stream_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStreamId() {
        
        streamId_ = 0L;
        onChanged();
        return this;
      }

      private long chunkId_ ;
      /**
       * <code>int64 chunk_id = 2;</code>
       * @return The chunkId.
       */
      public long getChunkId() {
        return chunkId_;
      }
      /**
       * <code>int64 chunk_id = 2;</code>
       * @param value The chunkId to set.
       * @return This builder for chaining.
       */
      public Builder setChunkId(long value) {
        
        chunkId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 chunk_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChunkId() {
        
        chunkId_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:jrpc.ChunkInfo)
    }

    // @@protoc_insertion_point(class_scope:jrpc.ChunkInfo)
    private static final com.sjt.jrpc.protocol.Options.ChunkInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.sjt.jrpc.protocol.Options.ChunkInfo();
    }

    public static com.sjt.jrpc.protocol.Options.ChunkInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChunkInfo>
        PARSER = new com.google.protobuf.AbstractParser<ChunkInfo>() {
      @java.lang.Override
      public ChunkInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChunkInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChunkInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChunkInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.sjt.jrpc.protocol.Options.ChunkInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int SERVICE_TIMEOUT_FIELD_NUMBER = 90000;
  /**
   * <pre>
   * Timeout in milliseconds, at service level.
   * </pre>
   *
   * <code>extend .google.protobuf.ServiceOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.ServiceOptions,
      java.lang.Long> serviceTimeout = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Long.class,
        null);
  public static final int REQUEST_TALK_TYPE_FIELD_NUMBER = 90001;
  /**
   * <pre>
   * Talk type.
   * </pre>
   *
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.sjt.jrpc.protocol.Options.TalkType> requestTalkType = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.sjt.jrpc.protocol.Options.TalkType.class,
        null);
  public static final int RESPONSE_TALK_TYPE_FIELD_NUMBER = 90002;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.sjt.jrpc.protocol.Options.TalkType> responseTalkType = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.sjt.jrpc.protocol.Options.TalkType.class,
        null);
  public static final int METHOD_TIMEOUT_FIELD_NUMBER = 90003;
  /**
   * <pre>
   * If set, override service_timeout.
   * </pre>
   *
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      java.lang.Long> methodTimeout = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        java.lang.Long.class,
        null);
  public static final int REQUEST_COMPRESSION_FIELD_NUMBER = 90004;
  /**
   * <pre>
   * Compression for request/response.
   * </pre>
   *
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.sjt.jrpc.protocol.Options.CompressType> requestCompression = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.sjt.jrpc.protocol.Options.CompressType.class,
        null);
  public static final int RESPONSE_COMPRESSION_FIELD_NUMBER = 90005;
  /**
   * <code>extend .google.protobuf.MethodOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MethodOptions,
      com.sjt.jrpc.protocol.Options.CompressType> responseCompression = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        com.sjt.jrpc.protocol.Options.CompressType.class,
        null);
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_jrpc_ChunkInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_jrpc_ChunkInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\roptions.proto\022\004jrpc\032 google/protobuf/d" +
      "escriptor.proto\"0\n\tChunkInfo\022\021\n\tstream_i" +
      "d\030\001 \001(\003\022\020\n\010chunk_id\030\002 \001(\003*6\n\010TalkType\022\024\n" +
      "\020TALK_TYPE_NORMAL\020\000\022\024\n\020TALK_TYPE_ONEWAY\020" +
      "\001*\200\001\n\016ConnectionType\022\033\n\027CONNECTION_TYPE_" +
      "UNKNOWN\020\000\022\032\n\026CONNECTION_TYPE_SINGLE\020\001\022\032\n" +
      "\026CONNECTION_TYPE_POOLED\020\002\022\031\n\025CONNECTION_" +
      "TYPE_SHORT\020\004*\332\006\n\014ProtocolType\022\024\n\020PROTOCO" +
      "L_UNKNOWN\020\000\022\024\n\020PROTOCOL_SJT_STD\020\001\022\032\n\026PRO" +
      "TOCOL_STREAMING_RPC\020\002\022\027\n\023PROTOCOL_HULU_P" +
      "BRPC\020\003\022\027\n\023PROTOCOL_SOFA_PBRPC\020\004\022\021\n\rPROTO" +
      "COL_RTMP\020\005\022\021\n\rPROTOCOL_HTTP\020\006\022\031\n\025PROTOCO" +
      "L_PUBLIC_PBRPC\020\007\022\027\n\023PROTOCOL_NOVA_PBRPC\020" +
      "\010\022\032\n\026PROTOCOL_NSHEAD_CLIENT\020\t\022\023\n\017PROTOCO" +
      "L_NSHEAD\020\n\022\027\n\023PROTOCOL_HADOOP_RPC\020\013\022\036\n\032P" +
      "ROTOCOL_HADOOP_SERVER_RPC\020\014\022\022\n\016PROTOCOL_" +
      "MONGO\020\r\022\032\n\026PROTOCOL_UBRPC_COMPACK\020\016\022\030\n\024P" +
      "ROTOCOL_DIDX_CLIENT\020\017\022\022\n\016PROTOCOL_REDIS\020" +
      "\020\022\025\n\021PROTOCOL_MEMCACHE\020\021\022\020\n\014PROTOCOL_ITP" +
      "\020\022\022\032\n\026PROTOCOL_NSHEAD_MCPACK\020\023\022\025\n\021PROTOC" +
      "OL_DISP_IDL\020\024\022\031\n\025PROTOCOL_ERSDA_CLIENT\020\025" +
      "\022\032\n\026PROTOCOL_UBRPC_MCPACK2\020\026\022\026\n\022PROTOCOL" +
      "_CDS_AGENT\020\027\022\020\n\014PROTOCOL_ESP\020\030\022 \n\034PROTOC" +
      "OL_SJT_JSON_RPC_MCPACK\020\031\022\036\n\032PROTOCOL_SJT" +
      "_JSON_RPC_JSON\020\032\022\034\n\030PROTOCOL_NSHEAD_PROT" +
      "OBUF\020\034\022\032\n\026PROTOCOL_HTTP_PROTOBUF\020\035\022\026\n\022PR" +
      "OTOCOL_HTTP_JSON\020\036\022\030\n\024PROTOCOL_NSHEAD_JS" +
      "ON\020\037\022\025\n\021PROTOCOL_STARGATE\020 \022\030\n\024PROTOCOL_" +
      "SERVER_PUSH\020!\022\022\n\016PROTOCOL_DUBBO\020\"*\207\001\n\014Co" +
      "mpressType\022\026\n\022COMPRESS_TYPE_NONE\020\000\022\030\n\024CO" +
      "MPRESS_TYPE_SNAPPY\020\001\022\026\n\022COMPRESS_TYPE_GZ" +
      "IP\020\002\022\026\n\022COMPRESS_TYPE_ZLIB\020\003\022\025\n\021COMPRESS" +
      "_TYPE_LZ4\020\004::\n\017service_timeout\022\037.google." +
      "protobuf.ServiceOptions\030\220\277\005 \001(\003:K\n\021reque" +
      "st_talk_type\022\036.google.protobuf.MethodOpt" +
      "ions\030\221\277\005 \001(\0162\016.jrpc.TalkType:L\n\022response" +
      "_talk_type\022\036.google.protobuf.MethodOptio" +
      "ns\030\222\277\005 \001(\0162\016.jrpc.TalkType:8\n\016method_tim" +
      "eout\022\036.google.protobuf.MethodOptions\030\223\277\005" +
      " \001(\003:Q\n\023request_compression\022\036.google.pro" +
      "tobuf.MethodOptions\030\224\277\005 \001(\0162\022.jrpc.Compr" +
      "essType:R\n\024response_compression\022\036.google" +
      ".protobuf.MethodOptions\030\225\277\005 \001(\0162\022.jrpc.C" +
      "ompressTypeB \n\025com.sjt.jrpc.protocolB\007Op" +
      "tionsb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
        });
    internal_static_jrpc_ChunkInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_jrpc_ChunkInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_jrpc_ChunkInfo_descriptor,
        new java.lang.String[] { "StreamId", "ChunkId", });
    serviceTimeout.internalInit(descriptor.getExtensions().get(0));
    requestTalkType.internalInit(descriptor.getExtensions().get(1));
    responseTalkType.internalInit(descriptor.getExtensions().get(2));
    methodTimeout.internalInit(descriptor.getExtensions().get(3));
    requestCompression.internalInit(descriptor.getExtensions().get(4));
    responseCompression.internalInit(descriptor.getExtensions().get(5));
    com.google.protobuf.DescriptorProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
